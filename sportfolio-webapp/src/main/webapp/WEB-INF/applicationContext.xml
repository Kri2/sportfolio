<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
 http://www.springframework.org/schema/mvc 
 http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
 http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
 http://www.springframework.org/schema/context 
 http://www.springframework.org/schema/context/spring-context-4.0.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
 http://www.springframework.org/schema/data/jpa 
 http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd">
	
	<!-- is used to determine the search of specific beans and attempt of autowiring. -->
	<context:component-scan base-package="io.github.kri2" />
	<!--  tutaj będą podane parametry bazy, np w src/main/resources/parametry.properties-->
	<context:property-placeholder location="classpath:parametry.properties,classpath:datasource.properties"/>
	
	<tx:annotation-driven />
	<context:annotation-config />
	<mvc:annotation-driven />
	<!--  <jpa:repositories base-package="io.github.kri2.domain"/> -->
	<jpa:repositories base-package="io.github.kri2"/>
	<!-- The ViewResolver maps view names to actual views -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix"><value>/WEB-INF/views/</value></property>
		<property name="suffix"><value>.jsp</value></property>
	</bean>
	
	<mvc:resources mapping="/resources/**" location="/resources/"
	cache-period="31556926"/>
	<!-- later could separate tyles into separate folders and change easly -->
	<!-- like this: location="/resources/theme1/" -->
	<!-- for JPA start -->
	
	
	<bean id="entityManagerFactory"
	 class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	    <property name="dataSource" ref="dataSource" />
	    <property name="packagesToScan" value="io.github.kri2" />
	    <property name="jpaVendorAdapter">
	        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
	            <!-- Echo all executed SQL to stdout -->
	            <property name="showSql" value="true" />
	            <!-- SQL dialect -->
	            <!-- changed to MySQL5InnoDBDialect, MySQL5Dialect created myISAM tables which caused charges from AWS -->
	            <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
	            <!--  <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect" />-->
	            <!--   <property name="databasePlatform" value="org.hibernate.dialect.MySQLMyISAMDialect" />-->
	        </bean>
	    </property>
	    <property name="jpaProperties">
	        <props>
	        	<!-- Then Hibernate checks for the table. If table doesn’t exist then it creates a new table -->
	            <prop key="hibernate.hbm2ddl.auto">update</prop>
	            <!-- <prop key="hibernate.hbm2ddl.auto">create</prop>-->
	            <!-- innodb, default was myISAM which caused me charges from AWS (not in free-tier) -->
	            <!--  not sure about this one, probably wrong or not needed -->
	            <!--  <prop key="hibernate.dialect.storage_engine">innodb</prop>-->
	        </props>
	    </property>
	</bean>
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
	    <property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!-- for JPA end -->
</beans>